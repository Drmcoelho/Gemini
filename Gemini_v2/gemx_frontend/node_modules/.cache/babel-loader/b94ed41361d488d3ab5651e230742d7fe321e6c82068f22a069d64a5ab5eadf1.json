{"ast":null,"code":"var _jsxFileName = \"/workspaces/Gemini/Gemini_v2/gemx_frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [automations, setAutomations] = useState([]);\n  const [selectedAutomation, setSelectedAutomation] = useState(null);\n  const [prompt, setPrompt] = useState('');\n  const [output, setOutput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const API_BASE_URL = 'http://localhost:8000'; // Assuming FastAPI is running on port 8000\n\n  useEffect(() => {\n    // Fetch list of automations from the backend\n    const fetchAutomations = async () => {\n      try {\n        const response = await fetch(`${API_BASE_URL}/automations`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setAutomations(data.automations);\n      } catch (e) {\n        setError(`Failed to fetch automations: ${e.message}`);\n        console.error(\"Failed to fetch automations:\", e);\n      }\n    };\n    fetchAutomations();\n  }, []);\n  const handleRunAutomation = async () => {\n    if (!selectedAutomation || !prompt) {\n      setError(\"Please select an automation and enter a prompt.\");\n      return;\n    }\n    setLoading(true);\n    setError('');\n    setOutput('');\n    try {\n      const response = await fetch(`${API_BASE_URL}/automations/run`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          automation_name: selectedAutomation,\n          prompt: prompt,\n          extra_args: [] // Add any extra args if needed\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setOutput(data.output);\n    } catch (e) {\n      setError(`Failed to run automation: ${e.message}`);\n      console.error(\"Failed to run automation:\", e);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gemini Megapack v2 Web Interface\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"App-nav\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Automations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: automations.map(auto => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: selectedAutomation === auto ? 'selected' : '',\n            onClick: () => {\n              setSelectedAutomation(auto);\n              setError('');\n              setOutput('');\n            },\n            children: auto\n          }, auto, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"App-main\",\n        children: selectedAutomation ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Run: \", selectedAutomation]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"Enter your prompt here...\",\n            value: prompt,\n            onChange: e => setPrompt(e.target.value),\n            rows: \"10\",\n            cols: \"80\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleRunAutomation,\n            disabled: loading,\n            children: loading ? 'Running...' : 'Run Automation'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), output && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"App-output\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Output:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n              children: output\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select an automation from the menu.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"brX0sbhFROrktjerfKnV8+UCh7s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","automations","setAutomations","selectedAutomation","setSelectedAutomation","prompt","setPrompt","output","setOutput","loading","setLoading","error","setError","API_BASE_URL","fetchAutomations","response","fetch","ok","Error","status","data","json","e","message","console","handleRunAutomation","method","headers","body","JSON","stringify","automation_name","extra_args","errorData","detail","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","auto","onClick","placeholder","value","onChange","target","rows","cols","disabled","_c","$RefreshReg$"],"sources":["/workspaces/Gemini/Gemini_v2/gemx_frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [automations, setAutomations] = useState([]);\n  const [selectedAutomation, setSelectedAutomation] = useState(null);\n  const [prompt, setPrompt] = useState('');\n  const [output, setOutput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const API_BASE_URL = 'http://localhost:8000'; // Assuming FastAPI is running on port 8000\n\n  useEffect(() => {\n    // Fetch list of automations from the backend\n    const fetchAutomations = async () => {\n      try {\n        const response = await fetch(`${API_BASE_URL}/automations`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setAutomations(data.automations);\n      } catch (e) {\n        setError(`Failed to fetch automations: ${e.message}`);\n        console.error(\"Failed to fetch automations:\", e);\n      }\n    };\n\n    fetchAutomations();\n  }, []);\n\n  const handleRunAutomation = async () => {\n    if (!selectedAutomation || !prompt) {\n      setError(\"Please select an automation and enter a prompt.\");\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    setOutput('');\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/automations/run`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          automation_name: selectedAutomation,\n          prompt: prompt,\n          extra_args: [], // Add any extra args if needed\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setOutput(data.output);\n    } catch (e) {\n      setError(`Failed to run automation: ${e.message}`);\n      console.error(\"Failed to run automation:\", e);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Gemini Megapack v2 Web Interface</h1>\n      </header>\n      <div className=\"App-container\">\n        <nav className=\"App-nav\">\n          <h2>Automations</h2>\n          {error && <p className=\"error-message\">{error}</p>}\n          <ul>\n            {automations.map((auto) => (\n              <li\n                key={auto}\n                className={selectedAutomation === auto ? 'selected' : ''}\n                onClick={() => {\n                  setSelectedAutomation(auto);\n                  setError('');\n                  setOutput('');\n                }}\n              >\n                {auto}\n              </li>\n            ))}\n          </ul>\n        </nav>\n        <main className=\"App-main\">\n          {selectedAutomation ? (\n            <div>\n              <h2>Run: {selectedAutomation}</h2>\n              <textarea\n                placeholder=\"Enter your prompt here...\"\n                value={prompt}\n                onChange={(e) => setPrompt(e.target.value)}\n                rows=\"10\"\n                cols=\"80\"\n              ></textarea>\n              <button onClick={handleRunAutomation} disabled={loading}>\n                {loading ? 'Running...' : 'Run Automation'}\n              </button>\n              {output && (\n                <div className=\"App-output\">\n                  <h3>Output:</h3>\n                  <pre>{output}</pre>\n                </div>\n              )}\n            </div>\n          ) : (\n            <p>Select an automation from the menu.</p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}